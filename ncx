#!/bin/sh
# NVMC's helper commands

# Default directories
NCDIR="/var/nc"
VMDIR="$NCDIR/vms"
HSDIR="$NCDIR/hosts"
IMDIR="$NCDIR/imgs"
IMDIR_MAIN="$NCDIR/imgs_main"
MACPT="52:54:CC:5E:%02X:%02X"
ADDPT="10.1.%d.%d"

# mkvm variables
mems="1"
cpus="1"
initdisk="10"
disk=""
user="root"
name=""
host="host1"
temp=""
gpu=""
iso=""
img=""
net=""
cln=""

mkvmusage() {
	echo "Usage: $0 options"
	echo
	echo "Options:"
	echo "  -n name    VM name"
	echo "  -u user    VM owner"
	echo "  -c cpus    CPU count"
	echo "  -m mem     memory size (GB)"
	echo "  -d size    disk size (GB)"
	echo "  -h host    VM host"
	echo "  -t temp    template (use -T to list)"
	echo "  -q img     disk image (qcow2)"
	echo "  -i iso     CD/DVD ISO"
	echo "  -g gpu#    GPU number to passthrough (1, 2)"
	echo "  -net x     NIC type (b: bridge, u: slirp)"
	echo "  -cln x     disk image clone type (c: copy, o: overlay)"
}

mkvmoptions() {
	while test "$#" -ge 1; do
		case "$1" in
			-c)
				cpus="$2"
				shift && test "$#" -ge 1 && shift
				;;
			-m)
				mems="$2"
				shift && test "$#" -ge 1 && shift
				;;
			-d)
				disk="$2"
				shift && test "$#" -ge 1 && shift
				;;
			-D)
				initdisk="$2"
				shift && test "$#" -ge 1 && shift
				;;
			-n)
				name="$2"
				shift && test "$#" -ge 1 && shift
				;;
			-u)
				user="$2"
				shift && test "$#" -ge 1 && shift
				;;
			-h)
				host="$2"
				shift && test "$#" -ge 1 && shift
				;;
			-t)
				temp="$2"
				shift && test "$#" -ge 1 && shift
				;;
			-q)
				img="$2"
				shift && test "$#" -ge 1 && shift
				;;
			-i)
				iso="$iso $2"
				shift && test "$#" -ge 1 && shift
				;;
			-g)
				gpu="$gpu $2"
				shift && test "$#" -ge 1 && shift
				;;
			-net)
				net="$2"
				shift && test "$#" -ge 1 && shift
				;;
			-cln)
				cln="$2"
				shift && test "$#" -ge 1 && shift
				;;
			-T)
				test -f $NCDIR/TEMP && cat $NCDIR/TEMP
				return 1
				;;
			*)
				mkvmusage
				return 1
				;;
		esac
	done
}

ncmkvm() {
	shift
	if test "$#" = "0"; then
		mkvmusage
		return 1
	fi
	if ! mkvmoptions $*; then
		return 1
	fi
	# Read template options
	if test -n "$temp" && grep "^$temp	" $NCDIR/TEMP 1>/dev/null 2>&1; then
		opts="`grep \"^$temp	\" $NCDIR/TEMP | cut -f 2`"
		mkvmoptions $opts
	fi
	# Check VM name
	if test -z "$name"; then
		echo "VM name cannot be empty"
		return 1
	fi
	vm="$VMDIR/$name"
	if test -d $vm; then
		echo "Directory <$vm> already exists"
		return 1
	fi
	if test ! -d "$HSDIR/$host"; then
		echo "Unknown host <$host>"
		return 1
	fi
	if ! id $user >/dev/null 2>&1; then
		echo "Unknown user <$user>"
		return 1
	fi
	# Create VM directory and files
	mkdir -p $vm
	echo $cpus >$vm/CPUS
	echo $mems >$vm/MEMS
	echo $initdisk >$vm/DISK
	echo $gpu | wc -w >$vm/GPUS
	echo $host >$vm/HOST
	id -u $user >$vm/USER
	# Adding Qemu options
	for x in $iso; do
		echo "-drive file=$IMDIR/$x,format=raw,readonly=on,media=cdrom" >>$vm/OPTS
	done
	for x in $gpu; do
		test "$x" = "1" && echo "-device vfio-pci,host=0b:00.1 -device vfio-pci,host=0b:00.2 -device vfio-pci,host=0b:00.0 -device vfio-pci,host=0b:00.3" >>$vm/OPTS
		test "$x" = "2" && echo "-device vfio-pci,host=84:00.1 -device vfio-pci,host=84:00.2 -device vfio-pci,host=84:00.0 -device vfio-pci,host=84:00.3" >>$vm/OPTS
	done
	# Create INIT script
	echo "#!/bin/sh" >$vm/INIT
	echo "test -f disk && exit" >>$vm/INIT
	# Create a local copy of the image if it does not exist
	echo "if test ! -f $IMDIR/$img && test -f $IMDIR_MAIN/$img; then" >>$vm/INIT
	echo "	mkdir -p $IMDIR/" >>$vm/INIT
	echo "	cp $IMDIR_MAIN/$img $IMDIR/$img" >>$vm/INIT
	echo "fi" >>$vm/INIT
	# Create VM's disk image
	if test -z "$cln" -o "$cln" = "c"; then
		echo "cp $IMDIR/$img disk" >>$vm/INIT
	else
		echo "qemu-img create -f qcow2 -b $IMDIR/$img disk" >>$vm/INIT
	fi
	chmod +x $vm/INIT
	if test -n "$disk"; then
		if test "$disk" -gt "`cat $vm/DISK`"; then
			echo "#!/bin/sh" >$vm/ONCE
			echo "qemu-img resize disk ${disk}G" >>$vm/ONCE
			chmod +x $vm/ONCE
			echo $disk >$vm/DISK
		fi
	fi
	# VM information
	echo "VM name         $name"
	echo "VM memory size  $mems"
	echo "VM cpu count    $cpus"
	echo "VM owner        $user"
	echo "VM host         $host"
	# Start the VM
	if ! nc push $name; then
		echo "Retry <nc push $name> later"
		return 1
	fi
	slot="`cat $vm/SLOT`"
	echo "VM slot         $slot"
	# Assign a MAC address (for bridged networking)
	if test -z "$net" -o "$net" = "b"; then
		printf "$MACPT\\n" "`expr $slot / 256`" "`expr $slot % 256`" >$vm/EMAC
		emac="`cat $vm/EMAC`"
		echo "VM mac address  $emac"
		nc push $name
	fi
}

ncrmvm() {
	shift
	nc drop $1
}

ncmkuser() {
	shift
	if test "$#" -lt 2; then
		echo "Usage: $0 username password"
		return 1
	fi
	user="$1"
	pass="$2"
	group="users"
	name=""
	if test -d /home/$user; then
		echo "User $user already exists"
		return 1
	fi
	if ! useradd -d /home/$user -g $group -m -N -c "$name" -s /var/nc/nclogin $user; then
		echo "Failed to create user $name"
		return 1
	fi
	chmod 700 /home/$user
	if ! echo $user:$pass | chpasswd; then
		echo "Failed to create user $name's password"
		return 1
	fi
}

ncrmuser() {
	shift
	user="$1"
	if test -z "$user"; then
		echo "Usage: $0 username"
		return 1
	fi
	if test ! -d /home/$user; then
		echo "User $user does not exist"
		return 1
	fi
	if ! userdel $user; then
		echo "Failed to remove user $user"
		return 1;
	fi
	rm -r /home/$user
}

ncbackup() {
	name="nvmc`date '+%Y%m%d%H%M%S'`"
	cp -r /var/nc $name
	tar czf $name.tar.gz $name
	rm -r "$name"
}

ncmacs() {
	shift
	n="$1"
	test -z "$n" && n="200"
	for i in `seq 0 $n`; do
		printf "$MACPT " "`expr $i / 256`" "`expr $i % 256`"
		printf "$ADDPT\n" "`expr 2 + $i / 250`" "`expr $i % 250 + 1`"
	done
}

ncaddr() {
	shift
	vm="$1"
	if test -z "$vm"; then
		echo "Usage: $0 vm_name"
		exit
	fi
	if test ! -d "$VMDIR/$vm"; then
		echo "Directory $VMDIR/$vm does not exist"
		exit 1
	fi
	slot="`cat $VMDIR/$vm/SLOT`"
	printf "$ADDPT\n" "`expr 2 + $slot / 250`" "`expr $slot % 250 + 1`"
}

ncdhcpconf() {
	shift
	echo "# VM subnet"
	echo "subnet 10.1.0.0 netmask 255.255.0.0 {"
	echo "  range 10.1.2.1 10.1.254.254;"
	echo "}"
	echo "# VM IP addresses"
	i="0"
	ncmacs ncmacs $1 | while read x; do
		mac="`echo $x | cut -d ' ' -f 1`"
		ip="`echo $x | cut -d ' ' -f 2`"
		echo "host nvmc$i {"
		echo "  hardware ethernet $mac;"
		echo "  fixed-address $ip;"
		echo "}"
		i="`expr $n + 1`"
	done
}

# Main commands
case "$1" in
	mkuser)
		ncmkuser $* || exit 1
		;;
	rmuser)
		ncrmuser $* || exit 1
		;;
	mkvm)
		ncmkvm $* || exit 1
		;;
	rmvm)
		ncrmvm $* || exit 1
		;;
	addr)
		ncaddr $* || exit 1
		;;
	backup)
		ncbackup $* || exit 1
		;;
	macs)
		ncmacs $* || exit 1
		;;
	dhcpconf)
		ncdhcpconf $* || exit 1
		;;
	*)
		echo "Usage: $0 command [options]"
		echo
		echo "Available commands:"
		echo "  mkvm      create a VM"
		echo "  rmvm      remove a VM"
		echo "  addr      print VM IP address"
		echo "  mkuser    create a user"
		echo "  rmuser    remove a user"
		echo "  backup    create a backup of /var/nc"
		echo "  macs      print MAC-IP address mappings"
		echo "  dhcpconf  generate dhcpd config"
		;;
esac
